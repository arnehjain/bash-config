#!/usr/bin/env python3
import argparse
import logging
import os
import sys

import tqdm
import numpy as np
from PIL import Image
import pathos.multiprocessing as mp
from contextlib import closing

_logger = logging.getLogger(__name__)
_logger.setLevel(logging.INFO)
_logger.addHandler(logging.StreamHandler(sys.stdout))


def parse_args():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(title='commands', dest='command')
    subparsers.required = True

    # sample subcommand
    parser_resize = subparsers.add_parser('resize', help='resize image or images in directory')
    parser_resize.add_argument('-i', '--input', help='input image or directory')
    parser_resize.add_argument('-o', '--output', help='output directory')
    parser_resize.add_argument('--height', type=int, help='target image height')
    parser_resize.add_argument('--width', type=int, help='target image width')
    parser_resize.add_argument('-m', '--mode', default='nearest', help='resize mode in [nearest, linear, bicubic, antialias]')
    parser_resize.add_argument('--no_preserve_aspect_ratio', action='store_false', default=True, help='use to not preserve aspect ratio')
    parser_resize.add_argument('-t', '--threads', type=int, default=1, help='number of threads to run the job on.')

    parser_exec = subparsers.add_parser('execute', help='execute custom Pillow or numpy command')
    parser_exec.add_argument('-i', '--input', help='input image or directory')
    parser_exec.add_argument('-o', '--output', help='output directory')
    parser_exec.add_argument('-t', '--threads', type=int, default=1, help='number of threads to run the job on.')
    parser_exec.add_argument('-e', '--execute', type=str, help='custom commands to run. use img or image_arr to refer to input image. image_arr is saved to the output')

    return parser.parse_args()


class EasyPool(object):
    def __init__(self, method, threads=1, progressbar=False):
        self._method = method
        self._threads = threads
        self._progressbar = progressbar

    def map(self, items):
        result = []
        if self._threads == 1:
            for item in tqdm.tqdm(items):
                result.append(self._method(item))
        else:
            with closing(mp.Pool(self._threads)) as p:
                result = list(tqdm.tqdm(p.imap(self._method, items), total=len(items)))
                return result


def _resize_image(input_path, output_dir, size, mode, preserve_aspect_ratio):
    file_name = os.path.basename(input_path)
    try:
        output_file = os.path.join(output_dir, file_name)
        with Image.open(input_path) as image:
            if not preserve_aspect_ratio:
                target_image = image.resize(size, mode)
            else:
                image.thumbnail(size, mode)
                target_image = image
            target_image.save(output_file)
    except Exception:
        _logger.exception('exception when processing %s', file_name)


def _execute_image(input_path, output_dir, execute):
    file_name = os.path.basename(input_path)
    try:
        output_file = os.path.join(output_dir, file_name)
        with Image.open(input_path) as img:
            image_arr = np.array(img, dtype=np.uint8)
            vars = {}
            vars.update(globals())
            vars.update(locals())
            exec(execute, vars)
            del(vars)
            target_image = Image.fromarray(image_arr)
            target_image.save(output_file)
    except Exception:
        _logger.exception('exception when processing %s', file_name)


class ImageOps(object):

    def __init__(self, args):
        self.args = args

    def resize(self):
        _logger.info('command: resize')
        input_files = []
        if os.path.isdir(self.args.input):
            files = os.listdir(self.args.input)
            file_paths = [os.path.join(self.args.input, item) for item in files]
            input_files.extend(file_paths)
        else:
            input_files.append(self.args.input)

        if not os.path.exists(self.args.output):
            os.makedirs(self.args.output, exist_ok=True)
        mode_dict = {
            'nearest': Image.NEAREST,
            'linear': Image.LINEAR,
            'cubic': Image.CUBIC,
            'bicubic': Image.BICUBIC,
            'antialias': Image.ANTIALIAS
        }
        mode = mode_dict.get(self.args.mode, Image.NEAREST)
        target_size = (self.args.width, self.args.height)

        pool = EasyPool(lambda image_path: _resize_image(image_path, self.args.output, target_size, mode,
                                                         self.args.no_preserve_aspect_ratio), self.args.threads, True)
        pool.map(input_files)

    def execute(self):
        _logger.info('command: exec')
        input_files = []
        if os.path.isdir(self.args.input):
            files = os.listdir(self.args.input)
            file_paths = [os.path.join(self.args.input, item) for item in files]
            input_files.extend(file_paths)
        else:
            input_files.append(self.args.input)

        if not os.path.exists(self.args.output):
            os.makedirs(self.args.output, exist_ok=True)

        pool = EasyPool(lambda image_path: _execute_image(image_path, self.args.output, self.args.execute), self.args.threads, True)
        pool.map(input_files)

    def unknown_command(self):
        _logger.error('unknown command %s', self.args.command)
        exit(1)

    def run(self):
        return getattr(self, self.args.command, self.unknown_command)()


if __name__ == '__main__':
    imops = ImageOps(parse_args())
    imops.run()
