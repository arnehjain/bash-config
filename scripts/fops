#!/usr/bin/env python
import os
import sys
import numpy as np
import argparse


def _sample(args):
    lines = [line.rstrip('\n') for line in args.input.readlines()]
    number = len(lines)
    if args.ratio is not None:
        number = number * args.ratio
    if args.number is not None:
        number = args.number

    samples = np.random.choice(lines, int(number))
    for sample in samples:
        args.output.write(sample)
        args.output.write(os.linesep)
    args.output.flush()
    return 0


def _intersect(args):
    inputs = [[line.rstrip('\n') for line in cur_input.readlines()] for cur_input in args.input]

    # Check if this is also in a pipe context
    if not os.isatty(sys.stdin.fileno()):
        inputs.append([line.rstrip('\n') for line in sys.stdin.readlines()])

    intersection = reduce(np.intersect1d, inputs)
    for line in intersection:
        args.output.write(line)
        args.output.write(os.linesep)
    args.output.flush()
    return 0


def _filter(args):
    lines = [line.rstrip('\n') for line in args.input.readlines()]
    filter_lines = set([line.rstrip('\n') for line in args.filter.readlines()])

    filter_output = [line for line in lines if line not in filter_lines]
    for line in filter_output:
        args.output.write(line)
        args.output.write(os.linesep)
    args.output.flush()
    return 0


def parse_args():
    parser = argparse.ArgumentParser(description='File Utils')
    subparsers = parser.add_subparsers(title='commands', dest='command')

    # sample subcommand
    parser_split = subparsers.add_parser('sample', help='Sample the input.')
    parser_split.add_argument('-i', '--input', nargs='?', type=argparse.FileType('r'), default=sys.stdin)
    parser_split.add_argument('-o', '--output', nargs='?', type=argparse.FileType('w'), default=sys.stdout)
    parser_split.add_argument('-r', '--ratio', type=float)
    parser_split.add_argument('-n', '--number', type=int)

    # intersect subcommand
    parser_intersect = subparsers.add_parser('intersect', help='Intersection between the inputs. Removes Duplicates')
    parser_intersect.add_argument('-i', '--input', nargs='+', type=argparse.FileType('r'))
    parser_intersect.add_argument('-o', '--output', nargs='?', type=argparse.FileType('w'), default=sys.stdout)

    # filter subcommand
    parser_filter = subparsers.add_parser('filter', help='Filter out the input. Print lines in input that are not '
                                                         'present in filter.')
    parser_filter.add_argument('-i', '--input', nargs='?', type=argparse.FileType('r'), default=sys.stdin)
    parser_filter.add_argument('-f', '--filter', nargs='?', type=argparse.FileType('r'), default=sys.stdin)
    parser_filter.add_argument('-o', '--output', nargs='?', type=argparse.FileType('w'), default=sys.stdout)

    # todo:
    #  - Maybe merge if needed.
    #  - Append mode if needed.
    #  - Support for extensionless operations.
    return parser.parse_args()


if __name__ == "__main__":
    args = parse_args()
    switcher = {
        'sample': _sample,
        'intersect': _intersect,
        'filter': _filter,
    }
    callback = switcher.get(args.command)
    ret_val = callback(args)
    exit(ret_val)

